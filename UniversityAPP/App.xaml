<Application x:Class="Ejournall.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Ejournall">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--#region Menu Buttons-->
            <Style x:Key="menuButtons" TargetType="Button">
                <Setter Property="Foreground"  Value="#FF787878"/>
                <Setter Property="Margin" Value="0,0,0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                BorderThickness="5,0,0,0"
                                BorderBrush="{x:Null}"
                                Background="{x:Null}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers >
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value ="#FF11A76C"/>
                                    <Setter TargetName="border" Property="Background" Value ="#FF11A76C"/>
                                    <Setter TargetName="border" Property="BorderThickness" Value ="5,0,0,0"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value ="White"/>
                                    <Setter TargetName="border" Property="Background" Value ="#FF2A9D8B"/>
                                    <Setter TargetName="border" Property="BorderThickness" Value ="5,0,0,0"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->
            
            <!--#region DataCellStyle-->
            <!--<Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGrid}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGrid}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="Blue"/>
                        <Setter Property="Foreground" Value="White"/>
                        --><!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>--><!--
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="true"/>
                            <Condition Property="Selector.IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="Red"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>-->
            <!--#endregion-->

            <Style x:Key="btnUCStudent" TargetType="Button">
                <Setter Property="Foreground"  Value="#FF3691D1"/>
                <Setter Property="Margin" Value="1,0,0,0"/>
                <Setter Property="Width" Value="115"/>
                <Setter Property="Height" Value="37"/>
                <Setter Property="Margin" Value="10,0,0,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                BorderThickness="1,1,1,1"
                                BorderBrush="#FF3691D1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers >
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value ="#FF3691D1"/>
                                    <Setter TargetName="border" Property="Background" Value ="#7F95DBF0"/>
                                    <Setter TargetName="border" Property="BorderThickness" Value ="1,1,1,1"/>
                                    <Setter Property="Foreground" Value="#FF3691D1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Grid}" x:Key="grdSearch">
                <Setter Property="IsEnabled" Value="True"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="btnAdd">
                <Setter Property="Content" Value="Add"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Command" Value="{Binding Save}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                        <Setter Property="Content" Value="Save"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" x:Key="btnChange">
                <Setter Property="Content" Value="Edit"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Command" Value="{Binding Save}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                        <Setter Property="Content" Value="Save"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource  {x:Type Button}}" x:Key="btnReject">
                <Setter Property="Content" Value="Cancel Changes"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Command" Value="{Binding Reject}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource  {x:Type Button}}" x:Key="btnDelete">
                <Setter Property="Content" Value="Delete"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Command" Value="{Binding Delete}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource  {x:Type Button}}" x:Key="btnExcel">
                <Setter Property="Content" Value="Excel"/>
                <Setter Property="Width" Value="70"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Command" Value="{Binding ExportExcel}"/>
                <Setter Property="Background" Value="#FF008306"/>
            </Style>

            <Style TargetType="{x:Type ListViewItem}"  x:Key="listViewItemCustom">
                <Setter Property="MinHeight" Value="30"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Background" Value="White" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Grid Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" >
                                <GridViewRowPresenter Content="{TemplateBinding Content}" Margin="0" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
                        <Setter Property="Background" Value="LightGray" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#5DADE2"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ListView}" x:Key="listViewCustom">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="2">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="3">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"></Setter>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Visible"></Setter>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="AlternationCount" Value="2"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource listViewItemCustom}"></Setter>
            </Style>

            <Style TargetType="TextBlock" x:Key="gridViewTextColumn">
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Padding" Value="15,0"/>
            </Style>

            <Style TargetType="{x:Type Grid}" x:Key="grdForm">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="1">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CurrentSituation}" Value="4">
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
